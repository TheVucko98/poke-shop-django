# Generated by Django 5.0.6 on 2024-05-28 13:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Karta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('naziv', models.CharField(max_length=20)),
                ('cena', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('opis', models.CharField(max_length=255)),
                ('brPrimeraka', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('brLajkova', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('brDislajkova', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('slika', models.ImageField(null=True, upload_to='imgs/', verbose_name='Pokemon picture')),
                ('popust', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'Karta',
            },
        ),
        migrations.CreateModel(
            name='RegistrovanKorisnik',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('slika', models.ImageField(null=True, upload_to='imgs/', verbose_name='Profile picture')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'RegistrovanKorisnik',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='IstorijaKupovine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kolicina', models.IntegerField(default=0)),
                ('datum', models.DateField(default=django.utils.timezone.now)),
                ('vreme', models.TimeField(default=django.utils.timezone.now)),
                ('karta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PSI_DUCK.karta')),
                ('korisnik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'IstorijaKupovine',
            },
        ),
        migrations.CreateModel(
            name='InformacijePorudzbine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datum', models.DateField(default=django.utils.timezone.now)),
                ('vreme', models.TimeField(default=django.utils.timezone.now)),
                ('ime', models.CharField(max_length=20)),
                ('prezime', models.CharField(max_length=20)),
                ('adresa', models.CharField(max_length=100)),
                ('grad', models.CharField(max_length=20)),
                ('drzava', models.CharField(max_length=20)),
                ('korisnik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'InformacijePorudzbine',
            },
        ),
        migrations.CreateModel(
            name='Korpa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brojArtikala', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('karta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PSI_DUCK.karta')),
                ('porudzbina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PSI_DUCK.informacijeporudzbine')),
            ],
            options={
                'db_table': 'Korpa',
                'unique_together': {('porudzbina', 'karta')},
            },
        ),
        migrations.CreateModel(
            name='ListaZelja',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('karta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PSI_DUCK.karta')),
                ('korisnik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ListaZelja',
                'unique_together': {('karta', 'korisnik')},
            },
        ),
        migrations.CreateModel(
            name='jeOcenio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ocena', models.IntegerField(default=0)),
                ('karta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='PSI_DUCK.karta')),
                ('korisnik', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'jeOcenio',
                'unique_together': {('karta', 'korisnik')},
            },
        ),
    ]
